<?php

require_once dirname(__FILE__) . '/../utils.php';
require_once dirname(__FILE__) . '/field.php';

class PiplApi_Name extends PiplApi_Field
{
    // A name of a person.

    protected $attributes = array('type');
    protected $children = array('first', 'middle', 'last', 'prefix', 'suffix', 'raw', 'display');
    protected $types_set = array('present', 'maiden', 'former', 'alias', 'alternative', 'autogenerated');

    function __construct($params=array())
    {
        extract($params);
        parent::__construct($params);
        // `prefix`, `first`, `middle`, `last`, `suffix`, `raw`, `type`,
        // should all be strings.
        //
        // `raw` is an unparsed name like "Clark Joseph Kent", usefull when you
        // want to search by name and don't want to work hard to parse it.
        // Note that in response data there's never name.raw, the names in
        // the response are always parsed, this is only for querying with
        // an unparsed name.
        //
        // `type` is one of PiplApi_Name::$types_set.

        if (!empty($prefix))
        {
            $this->prefix = $prefix;
        }
        if (!empty($first))
        {
            $this->first = $first;
        }
        if (!empty($middle))
        {
            $this->middle = $middle;
        }
        if (!empty($last))
        {
            $this->last = $last;
        }
        if (!empty($suffix))
        {
            $this->suffix = $suffix;
        }
        if (!empty($raw))
        {
            $this->raw = $raw;
        }
        if (!empty($type))
        {
            $this->type = $type;
        }
        if (!empty($display))
        {
            $this->display = $display;
        }
    }

    public function is_searchable()
    {
        // A bool value that indicates whether the name is a valid name to
        // search by.
        $first = PiplApi_Utils::piplapi_alpha_chars(!empty($this->first) ? $this->first : '');
        $last = PiplApi_Utils::piplapi_alpha_chars(!empty($this->last) ? $this->last : '');
        $raw = PiplApi_Utils::piplapi_alpha_chars(!empty($this->raw) ? $this->raw : '');

        $func = function_exists("mb_strlen") ? "mb_strlen" : "strlen";
        return ($func($first) >= 2 && $func($last) >= 2) || $func($raw) >= 4;
    }
}

